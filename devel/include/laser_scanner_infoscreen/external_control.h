// Generated by gencpp from file laser_scanner_infoscreen/external_control.msg
// DO NOT EDIT!


#ifndef LASER_SCANNER_INFOSCREEN_MESSAGE_EXTERNAL_CONTROL_H
#define LASER_SCANNER_INFOSCREEN_MESSAGE_EXTERNAL_CONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace laser_scanner_infoscreen
{
template <class ContainerAllocator>
struct external_control_
{
  typedef external_control_<ContainerAllocator> Type;

  external_control_()
    : zoom_level(0)
    , area_active(0)
    , gesture(0)  {
    }
  external_control_(const ContainerAllocator& _alloc)
    : zoom_level(0)
    , area_active(0)
    , gesture(0)  {
  (void)_alloc;
    }



   typedef int16_t _zoom_level_type;
  _zoom_level_type zoom_level;

   typedef int16_t _area_active_type;
  _area_active_type area_active;

   typedef int16_t _gesture_type;
  _gesture_type gesture;




  typedef boost::shared_ptr< ::laser_scanner_infoscreen::external_control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::laser_scanner_infoscreen::external_control_<ContainerAllocator> const> ConstPtr;

}; // struct external_control_

typedef ::laser_scanner_infoscreen::external_control_<std::allocator<void> > external_control;

typedef boost::shared_ptr< ::laser_scanner_infoscreen::external_control > external_controlPtr;
typedef boost::shared_ptr< ::laser_scanner_infoscreen::external_control const> external_controlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::laser_scanner_infoscreen::external_control_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::laser_scanner_infoscreen::external_control_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace laser_scanner_infoscreen

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/lunar/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/lunar/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/lunar/share/sensor_msgs/cmake/../msg'], 'laser_scanner_infoscreen': ['/home/proto/catkin_test/src/laser_scanner_infoscreen/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::laser_scanner_infoscreen::external_control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::laser_scanner_infoscreen::external_control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laser_scanner_infoscreen::external_control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laser_scanner_infoscreen::external_control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laser_scanner_infoscreen::external_control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laser_scanner_infoscreen::external_control_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::laser_scanner_infoscreen::external_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c278a2cd5011b0416a9f6f215c70966a";
  }

  static const char* value(const ::laser_scanner_infoscreen::external_control_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc278a2cd5011b041ULL;
  static const uint64_t static_value2 = 0x6a9f6f215c70966aULL;
};

template<class ContainerAllocator>
struct DataType< ::laser_scanner_infoscreen::external_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "laser_scanner_infoscreen/external_control";
  }

  static const char* value(const ::laser_scanner_infoscreen::external_control_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::laser_scanner_infoscreen::external_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 zoom_level\n\
int16 area_active\n\
int16 gesture\n\
";
  }

  static const char* value(const ::laser_scanner_infoscreen::external_control_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::laser_scanner_infoscreen::external_control_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.zoom_level);
      stream.next(m.area_active);
      stream.next(m.gesture);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct external_control_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::laser_scanner_infoscreen::external_control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::laser_scanner_infoscreen::external_control_<ContainerAllocator>& v)
  {
    s << indent << "zoom_level: ";
    Printer<int16_t>::stream(s, indent + "  ", v.zoom_level);
    s << indent << "area_active: ";
    Printer<int16_t>::stream(s, indent + "  ", v.area_active);
    s << indent << "gesture: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gesture);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LASER_SCANNER_INFOSCREEN_MESSAGE_EXTERNAL_CONTROL_H
