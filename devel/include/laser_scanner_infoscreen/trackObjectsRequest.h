// Generated by gencpp from file laser_scanner_infoscreen/trackObjectsRequest.msg
// DO NOT EDIT!


#ifndef LASER_SCANNER_INFOSCREEN_MESSAGE_TRACKOBJECTSREQUEST_H
#define LASER_SCANNER_INFOSCREEN_MESSAGE_TRACKOBJECTSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace laser_scanner_infoscreen
{
template <class ContainerAllocator>
struct trackObjectsRequest_
{
  typedef trackObjectsRequest_<ContainerAllocator> Type;

  trackObjectsRequest_()
    : angle_min(0.0)
    , angle_max(0.0)
    , angle_increment(0.0)
    , time_increment(0.0)
    , scan_time(0.0)
    , ranges()  {
    }
  trackObjectsRequest_(const ContainerAllocator& _alloc)
    : angle_min(0.0)
    , angle_max(0.0)
    , angle_increment(0.0)
    , time_increment(0.0)
    , scan_time(0.0)
    , ranges(_alloc)  {
  (void)_alloc;
    }



   typedef float _angle_min_type;
  _angle_min_type angle_min;

   typedef float _angle_max_type;
  _angle_max_type angle_max;

   typedef float _angle_increment_type;
  _angle_increment_type angle_increment;

   typedef float _time_increment_type;
  _time_increment_type time_increment;

   typedef float _scan_time_type;
  _scan_time_type scan_time;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _ranges_type;
  _ranges_type ranges;




  typedef boost::shared_ptr< ::laser_scanner_infoscreen::trackObjectsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::laser_scanner_infoscreen::trackObjectsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct trackObjectsRequest_

typedef ::laser_scanner_infoscreen::trackObjectsRequest_<std::allocator<void> > trackObjectsRequest;

typedef boost::shared_ptr< ::laser_scanner_infoscreen::trackObjectsRequest > trackObjectsRequestPtr;
typedef boost::shared_ptr< ::laser_scanner_infoscreen::trackObjectsRequest const> trackObjectsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::laser_scanner_infoscreen::trackObjectsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::laser_scanner_infoscreen::trackObjectsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace laser_scanner_infoscreen

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/lunar/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/lunar/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/lunar/share/sensor_msgs/cmake/../msg'], 'laser_scanner_infoscreen': ['/home/proto/catkin_ws/src/laser_scanner_infoscreen/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::laser_scanner_infoscreen::trackObjectsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::laser_scanner_infoscreen::trackObjectsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laser_scanner_infoscreen::trackObjectsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laser_scanner_infoscreen::trackObjectsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laser_scanner_infoscreen::trackObjectsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laser_scanner_infoscreen::trackObjectsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::laser_scanner_infoscreen::trackObjectsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cc1394f89117c0bbb3cdb3982efc44b7";
  }

  static const char* value(const ::laser_scanner_infoscreen::trackObjectsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcc1394f89117c0bbULL;
  static const uint64_t static_value2 = 0xb3cdb3982efc44b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::laser_scanner_infoscreen::trackObjectsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "laser_scanner_infoscreen/trackObjectsRequest";
  }

  static const char* value(const ::laser_scanner_infoscreen::trackObjectsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::laser_scanner_infoscreen::trackObjectsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
float32 angle_min\n\
float32 angle_max\n\
float32 angle_increment\n\
\n\
float32 time_increment\n\
float32 scan_time\n\
\n\
float32[] ranges\n\
";
  }

  static const char* value(const ::laser_scanner_infoscreen::trackObjectsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::laser_scanner_infoscreen::trackObjectsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle_min);
      stream.next(m.angle_max);
      stream.next(m.angle_increment);
      stream.next(m.time_increment);
      stream.next(m.scan_time);
      stream.next(m.ranges);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct trackObjectsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::laser_scanner_infoscreen::trackObjectsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::laser_scanner_infoscreen::trackObjectsRequest_<ContainerAllocator>& v)
  {
    s << indent << "angle_min: ";
    Printer<float>::stream(s, indent + "  ", v.angle_min);
    s << indent << "angle_max: ";
    Printer<float>::stream(s, indent + "  ", v.angle_max);
    s << indent << "angle_increment: ";
    Printer<float>::stream(s, indent + "  ", v.angle_increment);
    s << indent << "time_increment: ";
    Printer<float>::stream(s, indent + "  ", v.time_increment);
    s << indent << "scan_time: ";
    Printer<float>::stream(s, indent + "  ", v.scan_time);
    s << indent << "ranges[]" << std::endl;
    for (size_t i = 0; i < v.ranges.size(); ++i)
    {
      s << indent << "  ranges[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ranges[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LASER_SCANNER_INFOSCREEN_MESSAGE_TRACKOBJECTSREQUEST_H
