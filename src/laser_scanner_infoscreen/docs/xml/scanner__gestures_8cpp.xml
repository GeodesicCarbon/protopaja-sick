<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="scanner__gestures_8cpp" kind="file" language="C++">
    <compoundname>scanner_gestures.cpp</compoundname>
    <includes refid="scanner__gestures_8h" local="yes">scanner_gestures.h</includes>
    <includes local="no">cmath</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">visualization_msgs/Marker.h</includes>
    <incdepgraph>
      <node id="1175">
        <label>cmath</label>
      </node>
      <node id="1173">
        <label>scanner_gestures.h</label>
        <link refid="scanner__gestures_8h"/>
        <childnode refid="1174" relation="include">
        </childnode>
      </node>
      <node id="1172">
        <label>src/scanner_gestures.cpp</label>
        <link refid="scanner_gestures.cpp"/>
        <childnode refid="1173" relation="include">
        </childnode>
        <childnode refid="1175" relation="include">
        </childnode>
        <childnode refid="1176" relation="include">
        </childnode>
        <childnode refid="1177" relation="include">
        </childnode>
      </node>
      <node id="1177">
        <label>visualization_msgs/Marker.h</label>
      </node>
      <node id="1174">
        <label>ros/ros.h</label>
      </node>
      <node id="1176">
        <label>algorithm</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="scanner__gestures_8cpp_1a1d4463d923d0c190a5d47f3a454660de" prot="public" static="no">
        <name>DIST_MULTI</name>
        <initializer>10.0f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scanner_gestures.cpp" line="9" column="9" bodyfile="src/scanner_gestures.cpp" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="scanner__gestures_8cpp_1a7d98b34332a38e9d60b68a38f5640103" prot="public" static="no">
        <name>DECAY_CONST</name>
        <initializer>0.4f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/scanner_gestures.cpp" line="10" column="9" bodyfile="src/scanner_gestures.cpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="scanner__gestures_8h" kindref="compound">scanner_gestures.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;visualization_msgs/Marker.h&gt;</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor">#define<sp/>DIST_MULTI<sp/>10.0f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DECAY_CONST<sp/>0.4f</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">Scanner_gestures::Scanner_gestures()<sp/>:</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>right_score(0.0f),</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>left_score(0.0f),</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>poi_range(0.0f),</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>poi_angle(0.0f),</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>is_tracking(false)</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{right_closest<sp/>=<sp/>std::make_pair(0,<sp/>0);</highlight></codeline>
<codeline lineno="19"><highlight class="normal">left_closest<sp/>=<sp/>std::make_pair(0,<sp/>0);};</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Scanner_gestures::is_in_tracking_area(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;slice[index]<sp/>&lt;<sp/>this-&gt;poi_range<sp/>+<sp/>GESTURE_TRACKING_LENGTH<sp/>/<sp/>2<sp/>&amp;&amp;<sp/>this-&gt;slice[index]<sp/>&gt;<sp/>this-&gt;poi_range<sp/>-<sp/>GESTURE_TRACKING_LENGTH<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Scanner_gestures::delta_h(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle_increment,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mid<sp/>=<sp/>this-&gt;slice.size()/2;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>0<sp/>||<sp/>index<sp/>&gt;<sp/>this-&gt;slice.size()<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0f;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;slice[index]<sp/>*<sp/>sin((index<sp/>-<sp/>mid)*angle_increment);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Scanner_gestures::update_score(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle_increment)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left_closest_i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>left_closest<sp/>=<sp/>10000;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mid_i<sp/>=<sp/>this-&gt;slice.size()<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mid_i;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;slice[i]<sp/>&lt;<sp/>left_closest<sp/>&amp;&amp;<sp/>is_in_tracking_area(i)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::abs(this-&gt;slice[std::max(0,<sp/>i<sp/>-<sp/>1)]<sp/>-<sp/>this-&gt;slice[i])<sp/>&lt;<sp/>0.05<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::abs(this-&gt;slice[std::min(i<sp/>+<sp/>1,<sp/>mid_i)]<sp/>-<sp/>this-&gt;slice[i])<sp/>&lt;<sp/>0.05)<sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left_closest_i<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left_closest<sp/>=<sp/>this-&gt;slice[i];</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(left_closest<sp/>&lt;<sp/>10.0)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>left_dh<sp/>=<sp/>delta_h(angle_increment,<sp/>left_closest_i);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;left_score<sp/>=<sp/>std::max(0.0f,<sp/>this-&gt;left_score<sp/>+<sp/>std::max(0.0f,<sp/>std::min(this-&gt;left_closest.first<sp/>-<sp/>left_dh,<sp/>0.2f))*DIST_MULTI<sp/>-<sp/>DECAY_CONST);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;left_closest<sp/>=<sp/>std::make_pair(left_dh,<sp/>left_closest*cos((left_closest_i<sp/>-<sp/>mid_i)*angle_increment));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;left_score<sp/>=<sp/>std::max(0.0f,<sp/>this-&gt;left_score<sp/>-<sp/>DECAY_CONST);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>right_closest_i<sp/>=<sp/>mid_i;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>right_closest<sp/>=<sp/>10000;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>right_closest_i<sp/>+<sp/>1<sp/>;<sp/>i<sp/>&lt;<sp/>this-&gt;slice.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;slice[i]<sp/>&lt;<sp/>right_closest<sp/>&amp;&amp;<sp/>is_in_tracking_area(i)<sp/><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::abs(this-&gt;slice[std::max(i<sp/>-<sp/>1,<sp/>mid_i)]<sp/>-<sp/>this-&gt;slice[i])<sp/>&lt;<sp/>0.05<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::abs(this-&gt;slice[std::min(i<sp/>+<sp/>1,<sp/>mid_i*2-1)]<sp/>-<sp/>this-&gt;slice[i])<sp/>&lt;<sp/>0.05)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>right_closest_i<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>right_closest<sp/>=<sp/>this-&gt;slice[i];</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(right_closest<sp/>&lt;<sp/>10.0)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>right_dh<sp/>=<sp/>delta_h(angle_increment,<sp/>right_closest_i);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ROS_DEBUG(&quot;l_dh:<sp/>%f,<sp/>r_dh:<sp/>%f&quot;,<sp/>left_dh,<sp/>right_dh);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ROS_INFO(&quot;righ<sp/>ddh:<sp/>%f<sp/>&quot;,<sp/>right_dh<sp/>-<sp/>this-&gt;right_closest.first);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;right_score<sp/>=<sp/>std::max(0.0f,<sp/>this-&gt;right_score<sp/>+<sp/>std::max(0.0f,<sp/>std::min(right_dh<sp/>-<sp/>this-&gt;right_closest.first,<sp/>0.2f))*DIST_MULTI<sp/>-<sp/>DECAY_CONST);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;right_closest<sp/>=<sp/>std::make_pair(right_dh,<sp/>right_closest*cos((right_closest_i<sp/>-<sp/>mid_i)*angle_increment));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;right_score<sp/>=<sp/>std::max(0.0f,<sp/>this-&gt;right_score<sp/>-<sp/>DECAY_CONST);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">std::pair&lt;int,<sp/>int&gt;<sp/>Scanner_gestures::create_slice_indices(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle_start,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle_increment)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>alpha<sp/>=<sp/>atan(GESTURE_TRACKING_WIDTH<sp/>/<sp/>(2<sp/>*<sp/>this-&gt;poi_range));</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>increments<sp/>=<sp/>ceil(alpha<sp/>/<sp/>angle_increment);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ROS_INFO(&quot;poi_angle:<sp/>%.3f,<sp/>angle_start<sp/>%.3f&quot;,<sp/>this-&gt;poi_angle,<sp/>angle_start);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>poi_index<sp/>=<sp/>ceil((this-&gt;poi_angle<sp/>-<sp/>angle_start)<sp/>/<sp/>angle_increment);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ROS_INFO(&quot;poi_index:<sp/>%d,<sp/>increments<sp/>%d&quot;,<sp/>poi_index,<sp/>increments);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(poi_index<sp/>-<sp/>increments,<sp/>poi_index<sp/>+<sp/>increments);</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Scanner_gestures::parse_sensor_data(std::vector&lt;float&gt;<sp/>range,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle_start,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle_increment,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>poi_range,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>poi_angle)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;poi_range<sp/>=<sp/>poi_range;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;poi_angle<sp/>=<sp/>poi_angle;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;int,<sp/>int&gt;<sp/>slice_i<sp/>=<sp/>this-&gt;create_slice_indices(angle_start,<sp/>angle_increment);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ROS_INFO(&quot;slice_i:<sp/>%d<sp/>%d&quot;,<sp/>slice_i.first,<sp/>slice_i.second);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;slice.assign(range.begin()<sp/>+<sp/>slice_i.first,<sp/>range.begin()<sp/>+<sp/>slice_i.second);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;is_tracking<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;update_score(angle_increment);</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">gest_e<sp/>Scanner_gestures::get_gesture(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>threshold)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>ROS_DEBUG(</highlight><highlight class="stringliteral">&quot;right<sp/>score<sp/>%.3f<sp/>left<sp/>score<sp/>%.3f&quot;</highlight><highlight class="normal">,<sp/>this-&gt;right_score,<sp/>this-&gt;left_score);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;right_score<sp/>&gt;<sp/>this-&gt;left_score<sp/>&amp;&amp;<sp/>this-&gt;right_score<sp/>&gt;<sp/>threshold)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RIGHT_GESTURE;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;left_score<sp/>&gt;<sp/>threshold)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LEFT_GESTURE;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NO_GESTURE;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Scanner_gestures::set_tracking(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_tracking)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;is_tracking<sp/>=<sp/>is_tracking;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Scanner_gestures::get_tracking()</highlight></codeline>
<codeline lineno="117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;is_tracking;</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal">std::pair&lt;float,<sp/>float&gt;<sp/>Scanner_gestures::get_right_closest()<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;right_closest;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal">std::pair&lt;float,<sp/>float&gt;<sp/>Scanner_gestures::get_left_closest()<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;left_closest;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/scanner_gestures.cpp"/>
  </compounddef>
</doxygen>
