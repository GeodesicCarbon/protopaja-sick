<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="control__tcp__socket_8cpp" kind="file" language="C++">
    <compoundname>control_tcp_socket.cpp</compoundname>
    <includes local="yes">ros/ros.h</includes>
    <includes local="yes">laser_scanner_infoscreen/external_control.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">string.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">netinet/in.h</includes>
    <includes local="no">arpa/inet.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">netdb.h</includes>
    <incdepgraph>
      <node id="626">
        <label>netinet/in.h</label>
      </node>
      <node id="627">
        <label>arpa/inet.h</label>
      </node>
      <node id="622">
        <label>laser_scanner_infoscreen/external_control.h</label>
      </node>
      <node id="628">
        <label>stdlib.h</label>
      </node>
      <node id="630">
        <label>netdb.h</label>
      </node>
      <node id="620">
        <label>src/control_tcp_socket.cpp</label>
        <link refid="control_tcp_socket.cpp"/>
        <childnode refid="621" relation="include">
        </childnode>
        <childnode refid="622" relation="include">
        </childnode>
        <childnode refid="623" relation="include">
        </childnode>
        <childnode refid="624" relation="include">
        </childnode>
        <childnode refid="625" relation="include">
        </childnode>
        <childnode refid="626" relation="include">
        </childnode>
        <childnode refid="627" relation="include">
        </childnode>
        <childnode refid="628" relation="include">
        </childnode>
        <childnode refid="629" relation="include">
        </childnode>
        <childnode refid="630" relation="include">
        </childnode>
      </node>
      <node id="625">
        <label>sys/types.h</label>
      </node>
      <node id="624">
        <label>string.h</label>
      </node>
      <node id="629">
        <label>unistd.h</label>
      </node>
      <node id="621">
        <label>ros/ros.h</label>
      </node>
      <node id="623">
        <label>iostream</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="control__tcp__socket_8cpp_1a22cfe843bbfa92fae8f2e4f0692ece94" prot="public" static="no">
        <name>CHAR_BUFFER_SIZE</name>
        <initializer>512</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Size of the buffer used by the TCP node. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/control_tcp_socket.cpp" line="23" column="9" bodyfile="src/control_tcp_socket.cpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="control__tcp__socket_8cpp_1aa6cecb8c404241c624e83aee8a3979d2" prot="public" static="no">
        <name>SERVER_ADDRESS</name>
        <initializer>localhost</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Address of the TCP node. Currently runs only one localhost. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/control_tcp_socket.cpp" line="27" column="9" bodyfile="src/control_tcp_socket.cpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="control__tcp__socket_8cpp_1ae394a55d4227c16bca1b6e1ba6a5e8b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tcp_message_callback</definition>
        <argsstring>(const laser_scanner_infoscreen::external_control::ConstPtr &amp;msg)</argsstring>
        <name>tcp_message_callback</name>
        <param>
          <type>const laser_scanner_infoscreen::external_control::ConstPtr &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>external_control callback function. </para>        </briefdescription>
        <detaileddescription>
<para>A callback function of topic external_control. Parses and send message by TCP. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>topic message outlined in msg/external_control.msg </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/control_tcp_socket.cpp" line="36" column="1" bodyfile="src/control_tcp_socket.cpp" bodystart="36" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="control__tcp__socket_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Main function of the node Main function of the node. Creates socket, binds it and sets ROS to run. Handles cleanup.</para><para>Node currently uses port 2259 as it is free per <ulink url="https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtm">https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtm</ulink> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/control_tcp_socket.cpp" line="56" column="1" bodyfile="src/control_tcp_socket.cpp" bodystart="56" bodyend="119"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ROS node for the running infoscreen. Subscribes to the &apos;/external_control&apos; topic, receives, parses and send messages on the TCP socket for the GUI. <simplesect kind="see"><para>&lt;track_objects_client&gt; </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ros/ros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;laser_scanner_infoscreen/external_control.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;netinet/in.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;arpa/inet.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;netdb.h&gt;</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor">#define<sp/>CHAR_BUFFER_SIZE<sp/>512<sp/>//<sp/>Size<sp/>of<sp/>message<sp/>buffer,<sp/>message<sp/>itself<sp/>is<sp/>small</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor">#define<sp/>SERVER_ADDRESS<sp/>localhost<sp/>//<sp/>Only<sp/>local<sp/>run<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"></codeline>
<codeline lineno="36"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="control__tcp__socket_8cpp_1ae394a55d4227c16bca1b6e1ba6a5e8b4" kindref="member">tcp_message_callback</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>laser_scanner_infoscreen::external_control::ConstPtr&amp;<sp/>msg)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>char_buf[<ref refid="control__tcp__socket_8cpp_1a22cfe843bbfa92fae8f2e4f0692ece94" kindref="member">CHAR_BUFFER_SIZE</ref>]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>std::string<sp/>temp;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>temp.append(</highlight><highlight class="stringliteral">&quot;zoom:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>temp.append(to_string(msg-&gt;zoom_level));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>temp.append(</highlight><highlight class="stringliteral">&quot;<sp/>area:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>temp.append(to_string(msg-&gt;area_active));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>temp.append(</highlight><highlight class="stringliteral">&quot;<sp/>gesture:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>temp.append(to_string(msg-&gt;gesture));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>strcpy(char_buf,<sp/>temp.c_str());</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>send(server,<sp/>char_buf,<sp/>strlen(char_buf)+1,<sp/>0);</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="control__tcp__socket_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>client<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>server<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tcp_port<sp/>=<sp/>2259;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Server<sp/>adress<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in<sp/>server_address;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Hostent<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">hostent<sp/>*he;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>socklen_t<sp/>address_size;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Establishing<sp/>connection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>client<sp/>=<sp/>socket(AF_INET,<sp/>SOCK_STREAM,<sp/>0);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(client<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>create<sp/>socket.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>ROS_DEBUG(</highlight><highlight class="stringliteral">&quot;Socket<sp/>creation<sp/>complete.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>hostname[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;localhost&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>resolve<sp/>hostname<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(he<sp/>=<sp/>gethostbyname(hostname)<sp/>)<sp/>==<sp/>NULL<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);<sp/></highlight><highlight class="comment">/*<sp/>error<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>the<sp/>network<sp/>address<sp/>to<sp/>sockaddr_in<sp/>structure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>memcpy(&amp;server_address.sin_addr,<sp/>he-&gt;h_addr_list[0],<sp/>he-&gt;h_length);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>server_address.sin_family<sp/>=<sp/>AF_INET;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>server_address.sin_port<sp/>=<sp/>htons(tcp_port);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Bind<sp/>TCP<sp/>socket</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((bind(client,<sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr*)&amp;server_address,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(server_address)))<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;bind<sp/>failed.<sp/>Error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>listen(client,<sp/>1);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>address_size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(server_address);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>server<sp/>=<sp/>accept(client,(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr<sp/>*)&amp;server_address,&amp;address_size);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(server<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;accept<sp/>failed.<sp/>Error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>ros::init(argc,<sp/>argv,<sp/></highlight><highlight class="stringliteral">&quot;track_objects_client&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>ros::NodeHandle<sp/>n;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>ros::Subscriber<sp/>sub<sp/>=<sp/>n.subscribe(</highlight><highlight class="stringliteral">&quot;external_control&quot;</highlight><highlight class="normal">,<sp/>1000,<sp/><ref refid="control__tcp__socket_8cpp_1ae394a55d4227c16bca1b6e1ba6a5e8b4" kindref="member">tcp_message_callback</ref>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ros::ok()<sp/>&amp;&amp;<sp/>server<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ros::spinOnce();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>close(server);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>ROS_INFO_STREAM(</highlight><highlight class="stringliteral">&quot;Connection<sp/>terminated<sp/>with<sp/>IP<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>inet_ntoa(server_address.sin_addr));</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>close(client);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/control_tcp_socket.cpp"/>
  </compounddef>
</doxygen>
